miniC ver08
program ::= {declaration}{statement} EOF

declaration ::= intDecl | constDecl
intDecl ::= INT declItem {COMMA declItem} SEMI
constDecl ::= CONST INT constItem {COMMA constItem} SEMI
constItem ::=  [MULT] IDENT ASSIGN [AMP] NUM
declItem ::= [MULT] IDENT [LBRA NUM RBRA]

statement ::= statementAssign | statementIf | statementWhile | statementBlock | statementOut | statementIN | statementDoWhile

statementOUT ::= OUTPUT expression SEMI
statementIN ::= INPUT primary SEMI
statementBlock ::= LCUR {statement} RCUR                                //LCUR -> "{" RCUR->"}"
statementDoWhile ::= DO statement WHILE LPAR condition RPAR SEMI
statementWhile ::= WHILE LPAR condition RPAR statement
statementAssign ::= primary ASSIGN expression SEMI                      //ASSIGN->"=" SEMI->";"
statementIf :: = IF LPAR condition RPAR statement [ELSE statement ]


expression ::= term { expressionAdd | expressionSub }
expressionAdd ::= PLUS term
expressionSub ::= MINUS term

condition ::= expression (conditionLT | conditionLE | conditionGT | conditionGE | conditionEQ | conditionNE)
                | TRUE | FALSE
conditionLE ::= LE expression
conditionGT ::= GT expression
conditionGE ::= GE expression
conditionEQ ::= EQ expression
conditionNE ::= NE expression
conditionLT ::= LT expression

term ::= factor{ termMult | termDiv }
termMult ::= MULT factor
termDiv ::= DIV factor

factor ::= plusFactor | minusFactor | unsignedFactor
plusFactor ::= PLUS unsignedFactor
minusFactor ::= MINUS unsignedFactor
unsignedFactor ::= factorAmp | number | LPAR expression RPAR | addrresToValue
addressToValue := primary
factorAmp := AMP (number | primary) //AMP = '&'
primary := primaryMult | variable
primaryMult := MULT variable
variable := ident [ array ]
array := LBRA expression RBRA
ident := IDENT
number ::= NUM